{"version":3,"sources":["Utils/ColorCalc.js","Components/DateSelection/DateSelection.js","Components/ColorResult/ColorResult.js","Components/DesiredDisplay/DesiredDisplay.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["calc","date","daysInMonth","year","substring","month","day","includes","nYear","Number","isLeapYear","currentYear","Date","getFullYear","dayColor","Math","floor","monthColor","yearColor","console","log","zeroPad","num","places","String","padStart","calcColor","toString","DateSelection","props","state","pickedDate","handleDateChange","bind","event","this","setState","target","value","className","type","name","onChange","onClick","color","React","Component","ColorResult","id","displayColor","toUpperCase","DesiredDisplay","isHidden","reset","icon","faRedo","App","displayResult","updateColor","twitterColorDark","twitterColorLight","length","alert","style","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9c134b6b.chunk.js","sourcesContent":["function isLeapYear(year) {\n  let nYear = Number(year);\n  return (nYear % 4 === 0 && nYear % 100 !== 0) || nYear % 400 === 0;\n}\n\nexport default function calc(date) {\n  const year = date.substring(0, 4);\n  const month = date.substring(5, 7);\n  const day = date.substring(8);\n\n  let daysInMonth;\n  if ([\"04\", \"06\", \"09\", \"11\"].includes(month)) {\n    daysInMonth = 30;\n  } else if (isLeapYear(year) && month === \"02\") {\n    daysInMonth = 29;\n  } else {\n    daysInMonth = 31;\n  }\n\n  const currentYear = new Date().getFullYear();\n  // presumes max age possible is 100 years\n  const MAX_AGE = 100;\n\n  const dayColor = Math.floor((day * 256) / daysInMonth - 1);\n  const monthColor = Math.floor((month * 256) / 12 - 1);\n  const yearColor = Math.floor(\n    ((year - (currentYear - MAX_AGE)) * 256) / 100 - 1\n  );\n\n  console.log(\"dayColor: \" + dayColor);\n  console.log(\"monthColor: \" + monthColor);\n  console.log(\"yearColor: \" + yearColor);\n\n  // https://stackoverflow.com/a/2998874\n  const zeroPad = (num, places) => String(num).padStart(places, \"0\");\n\n  const calcColor =\n    \"#\" +\n    // convert to hex with padding zero if number is 1 digit long\n    zeroPad(dayColor.toString(16), 2) +\n    zeroPad(monthColor.toString(16), 2) +\n    zeroPad(yearColor.toString(16), 2);\n  console.log(calcColor);\n  return calcColor;\n}\n","import React from \"react\";\r\nimport \"./DateSelection.css\";\r\nimport calc from \"../../Utils/ColorCalc\";\r\n\r\nclass DateSelection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { pickedDate: \"\"};\r\n    this.handleDateChange = this.handleDateChange.bind(this);\r\n  }\r\n\r\n  handleDateChange(event) {\r\n    this.setState({\r\n      pickedDate: event.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"DateSelection\">\r\n        <p>Insert your date of birth</p>\r\n        <input\r\n          type=\"date\"\r\n          className=\"date-picker\"\r\n          name=\"test\"\r\n          onChange={this.handleDateChange}\r\n        ></input>\r\n        <button\r\n          className=\"confirm-button\"\r\n          onClick={() => this.props.color(calc(this.state.pickedDate))}\r\n        >\r\n          Confirm\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DateSelection;\r\n","import React from \"react\";\r\nimport \"./ColorResult.css\";\r\n\r\n\r\nclass ColorResult extends React.Component {\r\n  render() {\r\n    return (\r\n        <div className=\"ColorResult\">\r\n          <p>\r\n            Your color is{\" \"}\r\n            <span id=\"color-result\">\r\n              {this.props.displayColor.toUpperCase()}\r\n            </span>\r\n          </p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColorResult;\r\n","import React from \"react\";\r\nimport \"./DesiredDisplay.css\";\r\nimport DateSelection from \"../DateSelection/DateSelection\";\r\nimport ColorResult from \"../ColorResult/ColorResult\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRedo} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass DesiredDisplay extends React.Component {\r\n  render() {\r\n    if (this.props.isHidden) {\r\n      return (\r\n      <div>\r\n        <ColorResult displayColor={this.props.displayColor} />\r\n        <FontAwesomeIcon onClick={this.props.reset} id=\"reset-icon\" icon={faRedo}></FontAwesomeIcon>\r\n      </div>\r\n      );\r\n    }\r\n    return <DateSelection color={this.props.color} />;\r\n  }\r\n}\r\n\r\nexport default DesiredDisplay;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport DesiredDisplay from \"../DesiredDisplay/DesiredDisplay\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { calcColor: \"\", displayResult: false };\n    this.reset = this.reset.bind(this);\n    this.updateColor = this.updateColor.bind(this);\n    this.twitterColorDark = \"#15202b\";\n    this.twitterColorLight = \"#ffffff\";\n  }\n\n  reset() {\n    this.setState({\n      calcColor: \"\",\n      displayResult: false,\n    });\n  }\n\n  updateColor(value) {\n    // check if all values are valid\n    if (\n      Number(value.substring(1, 3)) < 0 ||\n      Number(value.substring(3, 5)) < 0 ||\n      Number(value.substring(5, 7)) < 0 ||\n      value.length !== 7\n    ) {\n      alert(\"Please insert a valid date\");\n    } else {\n      this.setState({\n        calcColor: value,\n        displayResult: true,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className=\"App\"\n        style={{\n          backgroundColor:\n            this.state.calcColor !== \"\"\n              ? this.state.calcColor\n              : this.twitterColorDark,\n        }}\n      >\n        <DesiredDisplay\n          isHidden={this.state.displayResult}\n          reset={this.reset}\n          color={this.updateColor}\n          displayColor={this.state.calcColor}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}